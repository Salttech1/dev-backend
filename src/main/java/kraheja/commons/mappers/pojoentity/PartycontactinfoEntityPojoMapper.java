package kraheja.commons.mappers.pojoentity;import java.math.BigInteger;import java.time.LocalDate;import java.time.LocalDateTime;import java.util.List;import java.util.Objects;import java.util.function.BiFunction;import java.util.function.Function;import org.apache.commons.collections4.CollectionUtils;import kraheja.commons.bean.request.PartycontactinfoRequestBean;import kraheja.commons.entity.Partycontactinfo;import kraheja.commons.entity.PartycontactinfoCK;import kraheja.commons.filter.GenericAuditContextHolder;import kraheja.commons.utils.CommonConstraints;import java.util.stream.Collectors;public interface PartycontactinfoEntityPojoMapper {	public static Function<PartycontactinfoRequestBean, Partycontactinfo> addPartycontactinfoPojoEntityMapper = (			partycontactinfoRequestBean) -> {		return Partycontactinfo.builder()				.partycontactinfoCK(						PartycontactinfoCK.builder().pciPartycode(partycontactinfoRequestBean.getPartycode()).build())				.pciBrand(partycontactinfoRequestBean.getBrand())				.pciCoord1phone(partycontactinfoRequestBean.getCoord1phone())				.pciCoord2phone(partycontactinfoRequestBean.getCoord2phone())				.pciCoordinator1(partycontactinfoRequestBean.getCoordinator1())				.pciCoordinator2(partycontactinfoRequestBean.getCoordinator2())				.pciHeadcontperson(partycontactinfoRequestBean.getHeadcontperson())				.pciHeadcontphone(partycontactinfoRequestBean.getHeadcontphone())				.pciIpaddress(partycontactinfoRequestBean.getIpaddress())				.pciMachinename(partycontactinfoRequestBean.getMachinename()).pciModifiedon(LocalDateTime.now())				.pciModule(partycontactinfoRequestBean.getModule()).pciRemarks(partycontactinfoRequestBean.getRemarks())				.pciSite(GenericAuditContextHolder.getContext().getSite())				.pciUserid(GenericAuditContextHolder.getContext().getUserid())				.build();	};	public static BiFunction<Partycontactinfo, PartycontactinfoRequestBean, Partycontactinfo> updatePartycontactinfoEntityPojoMapper = (			partycontactinfoEntity, partycontactinfoRequestBean) -> {		partycontactinfoEntity.getPartycontactinfoCK()				.setPciPartycode(Objects.nonNull(partycontactinfoRequestBean.getPartycode())						? partycontactinfoRequestBean.getPartycode().trim()						: partycontactinfoEntity.getPartycontactinfoCK().getPciPartycode());		partycontactinfoEntity.setPciBrand(				Objects.nonNull(partycontactinfoRequestBean.getBrand()) ? partycontactinfoRequestBean.getBrand().trim()						: partycontactinfoEntity.getPciBrand());		partycontactinfoEntity.setPciCoord1phone(Objects.nonNull(partycontactinfoRequestBean.getCoord1phone())				? partycontactinfoRequestBean.getCoord1phone().trim()				: partycontactinfoEntity.getPciCoord1phone());		partycontactinfoEntity.setPciCoord2phone(Objects.nonNull(partycontactinfoRequestBean.getCoord2phone())				? partycontactinfoRequestBean.getCoord2phone().trim()				: partycontactinfoEntity.getPciCoord2phone());		partycontactinfoEntity.setPciCoordinator1(Objects.nonNull(partycontactinfoRequestBean.getCoordinator1())				? partycontactinfoRequestBean.getCoordinator1().trim()				: partycontactinfoEntity.getPciCoordinator1());		partycontactinfoEntity.setPciCoordinator2(Objects.nonNull(partycontactinfoRequestBean.getCoordinator2())				? partycontactinfoRequestBean.getCoordinator2().trim()				: partycontactinfoEntity.getPciCoordinator2());		partycontactinfoEntity.setPciHeadcontperson(Objects.nonNull(partycontactinfoRequestBean.getHeadcontperson())				? partycontactinfoRequestBean.getHeadcontperson().trim()				: partycontactinfoEntity.getPciHeadcontperson());		partycontactinfoEntity.setPciHeadcontphone(Objects.nonNull(partycontactinfoRequestBean.getHeadcontphone())				? partycontactinfoRequestBean.getHeadcontphone().trim()				: partycontactinfoEntity.getPciHeadcontphone());		partycontactinfoEntity.setPciIpaddress(Objects.nonNull(partycontactinfoRequestBean.getIpaddress())				? partycontactinfoRequestBean.getIpaddress().trim()				: partycontactinfoEntity.getPciIpaddress());		partycontactinfoEntity.setPciMachinename(Objects.nonNull(partycontactinfoRequestBean.getMachinename())				? partycontactinfoRequestBean.getMachinename().trim()				: partycontactinfoEntity.getPciMachinename());		partycontactinfoEntity.setPciModifiedon(LocalDateTime.now());		partycontactinfoEntity.setPciModule(Objects.nonNull(partycontactinfoRequestBean.getModule())				? partycontactinfoRequestBean.getModule().trim()				: partycontactinfoEntity.getPciModule());		partycontactinfoEntity.setPciRemarks(Objects.nonNull(partycontactinfoRequestBean.getRemarks())				? partycontactinfoRequestBean.getRemarks().trim()				: partycontactinfoEntity.getPciRemarks());		partycontactinfoEntity.setPciSite(GenericAuditContextHolder.getContext().getSite());		partycontactinfoEntity.setPciUserid(GenericAuditContextHolder.getContext().getUserid());		return partycontactinfoEntity;	};}